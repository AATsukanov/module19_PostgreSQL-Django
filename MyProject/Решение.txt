Ставим:

.venv/scripts/activate

pip install django

pip install psycopg2
pip install psycopg2-binary

Создаем:

django-admin startproject MyProject

cd myproject

python manage.py startapp task_postgre

Настраиваем:

В settings.py:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'my_database',
        'USER': 'postgres',
        'PASSWORD': '',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

еще прописываем приложение 'task_postgre' в список INSTALLED_APPS:

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'task_postgre'
]

БД my_database - должна быть создана через "pgAdmin 4".

Потом в models.py добавляем модель:

например:
class Post(models.Model):
    title = models.CharField(max_length=255)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

И делаем миграцию:

python manage.py makemigrations
python manage.py migrate

создаем админ-пользователя:
python manage.py createsuperuser
заполняем...

В консоли запускаю InteractiveConsole:
python manage.py shell

далее работаю в ней,
проверяем:

>>> from task_postgre.models import Post
>>> Post.objects.all()
<QuerySet []>

заполняем:
>>> Post.objects.create(title='Article-1', content='Crumpled aluminum hydroxide nanostructures as a microenvironment dysregulation agent for cancer treatment.')
<Post: Post object (1)>
>>> Post.objects.create(title='Article-2', content='Energy and structure of bonds in the interaction of organic anions with layered double hydroxide nanosheets.')
<Post: Post object (2)>
>>> Post.objects.create(title='Article-3', content='Simulation of the Rayleigh waves in the proximity of the scattering velocity heterogeneities.')
<Post: Post object (3)>

Выводим все:
>>> Post.objects.all()
<QuerySet [<Post: Post object (1)>, <Post: Post object (2)>, <Post: Post object (3)>]>

Выводим по id:
>>> Post.objects.get(id=2)
<Post: Post object (2)>

Фильтруем:
>>> Post.objects.filter(title='Article-3')
<QuerySet [<Post: Post object (3)>]>

Обновляем:
>>> Post.objects.filter(id=2).update(title='New title 2')
1

Удаляем:
>>> Post.objects.get(id=1).delete()
(1, {'task_postgre.Post': 1})

Выводим все (для проверки:
>>> Post.objects.all()
<QuerySet [<Post: Post object (3)>, <Post: Post object (2)>]>
